# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gRPC.proto.grpc_pb2 as grpc__pb2


class GRPCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.unary = channel.unary_unary(
                '/gRPC.proto.bidirectional.GRPCService/unary',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.bidirectional = channel.stream_stream(
                '/gRPC.proto.bidirectional.GRPCService/bidirectional',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.response_stream = channel.unary_stream(
                '/gRPC.proto.bidirectional.GRPCService/response_stream',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.request_stream = channel.stream_unary(
                '/gRPC.proto.bidirectional.GRPCService/request_stream',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )


class GRPCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def unary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bidirectional(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def response_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'unary': grpc.unary_unary_rpc_method_handler(
                    servicer.unary,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'bidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.bidirectional,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'response_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.response_stream,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'request_stream': grpc.stream_unary_rpc_method_handler(
                    servicer.request_stream,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gRPC.proto.bidirectional.GRPCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def unary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gRPC.proto.bidirectional.GRPCService/unary',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def bidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gRPC.proto.bidirectional.GRPCService/bidirectional',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def response_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gRPC.proto.bidirectional.GRPCService/response_stream',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/gRPC.proto.bidirectional.GRPCService/request_stream',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
