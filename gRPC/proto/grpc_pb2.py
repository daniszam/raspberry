# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='grpc.proto',
  package='gRPC.proto.bidirectional',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\ngrpc.proto\x12\x18gRPC.proto.bidirectional\"\x1a\n\x07Message\x12\x0f\n\x07message\x18\x01 \x01(\t2\xf4\x02\n\x0bGRPCService\x12O\n\x05unary\x12!.gRPC.proto.bidirectional.Message\x1a!.gRPC.proto.bidirectional.Message\"\x00\x12[\n\rbidirectional\x12!.gRPC.proto.bidirectional.Message\x1a!.gRPC.proto.bidirectional.Message\"\x00(\x01\x30\x01\x12[\n\x0fresponse_stream\x12!.gRPC.proto.bidirectional.Message\x1a!.gRPC.proto.bidirectional.Message\"\x00\x30\x01\x12Z\n\x0erequest_stream\x12!.gRPC.proto.bidirectional.Message\x1a!.gRPC.proto.bidirectional.Message\"\x00(\x01\x62\x06proto3'
)




_MESSAGE = _descriptor.Descriptor(
  name='Message',
  full_name='gRPC.proto.bidirectional.Message',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='gRPC.proto.bidirectional.Message.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=66,
)

DESCRIPTOR.message_types_by_name['Message'] = _MESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Message = _reflection.GeneratedProtocolMessageType('Message', (_message.Message,), {
  'DESCRIPTOR' : _MESSAGE,
  '__module__' : 'grpc_pb2'
  # @@protoc_insertion_point(class_scope:gRPC.proto.bidirectional.Message)
  })
_sym_db.RegisterMessage(Message)



_GRPCSERVICE = _descriptor.ServiceDescriptor(
  name='GRPCService',
  full_name='gRPC.proto.bidirectional.GRPCService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=69,
  serialized_end=441,
  methods=[
  _descriptor.MethodDescriptor(
    name='unary',
    full_name='gRPC.proto.bidirectional.GRPCService.unary',
    index=0,
    containing_service=None,
    input_type=_MESSAGE,
    output_type=_MESSAGE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='bidirectional',
    full_name='gRPC.proto.bidirectional.GRPCService.bidirectional',
    index=1,
    containing_service=None,
    input_type=_MESSAGE,
    output_type=_MESSAGE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='response_stream',
    full_name='gRPC.proto.bidirectional.GRPCService.response_stream',
    index=2,
    containing_service=None,
    input_type=_MESSAGE,
    output_type=_MESSAGE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='request_stream',
    full_name='gRPC.proto.bidirectional.GRPCService.request_stream',
    index=3,
    containing_service=None,
    input_type=_MESSAGE,
    output_type=_MESSAGE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_GRPCSERVICE)

DESCRIPTOR.services_by_name['GRPCService'] = _GRPCSERVICE

# @@protoc_insertion_point(module_scope)
